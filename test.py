import unittest
import deltapv as dpv
from jax import numpy as jnp
import numpy as np
from scipy.optimize import minimize
from optimize import psc
from optimize import multi


class TestDeltaPV(unittest.TestCase):
    def test_iv(self):
        L = 3e-4
        J = 5e-6
        material = dpv.create_material(Chi=3.9,
                                       Eg=1.5,
                                       eps=9.4,
                                       Nc=8e17,
                                       Nv=1.8e19,
                                       mn=100,
                                       mp=100,
                                       Et=0,
                                       tn=1e-8,
                                       tp=1e-8,
                                       A=1e4)
        design = dpv.make_design(n_points=500,
                                 Ls=[J, L - J],
                                 mats=[material, material],
                                 Ns=[1e17, -1e15],
                                 Snl=1e7,
                                 Snr=0,
                                 Spl=0,
                                 Spr=1e7)
        results = dpv.simulate(design)
        v, j = results["iv"]

        v_correct = jnp.array([
            0.0, 0.05, 0.1, 0.15000000000000002, 0.2, 0.25,
            0.30000000000000004, 0.35000000000000003, 0.4, 0.45, 0.5, 0.55,
            0.6000000000000001, 0.6500000000000001, 0.7000000000000001, 0.75,
            0.8, 0.85, 0.9, 0.9500000000000001
        ])

        j_correct = jnp.array([
            0.01882799450659129, 0.018753370994746384, 0.018675073222852775,
            0.018592788678882418, 0.01850616015841796, 0.018414776404918568,
            0.018318159501526814, 0.01821574845029824, 0.018106874755825324,
            0.0179907188741479, 0.017866203205496447, 0.017731661626627034,
            0.017583825887487907, 0.01741498506998538, 0.017204823904941775,
            0.01689387681804267, 0.01628556057166174, 0.014630769395991339,
            0.008610345709349041, -0.018267911703588706
        ])

        self.assertTrue(jnp.allclose(v, v_correct), "Voltages do not match!")
        self.assertTrue(jnp.allclose(j, j_correct), "Currents do not match!")

    def test_psc(self):
        bounds = [(1, 5), (1, 5), (1, 20), (17, 20), (17, 20), (0, 3), (0, 3),
                  (1, 5), (1, 5), (1, 20), (17, 20), (17, 20), (0, 3), (0, 3),
                  (17, 20), (17, 20), (0, None)]

        x_init = np.array([
            1.661788237392516, 4.698293002285373, 19.6342803183675,
            18.83471869026531, 19.54569869328745, 0.7252792557586427,
            1.6231392299175988, 2.5268524699070234, 2.51936429069554,
            6.933634938056497, 19.41835918276137, 18.271793488422656,
            0.46319949214386513, 0.2058139980642224, 18.63975340175838,
            17.643726318153238
        ])

        opt = dpv.util.StatefulOptimizer(x_init=x_init,
                                         convr=psc.x2des,
                                         constr=psc.g,
                                         bounds=bounds)

        _ = opt.optimize(niters=5)
        y = opt.get_growth()
        
        y_correct = [
            -0.06472217, -0.06472217, -0.07843615, -0.07960816, -0.07960816, -0.08121816,
            -0.08280693, -0.08439443, -0.08598045, -0.08756473, -0.089147, -0.09072691,
            -0.0923041, -0.09387815, -0.09544858, -0.09701487, -0.09857645, -0.10013268,
            -0.10168287, -0.10322628, -0.10322628, -0.10482237, -0.10641457, -0.10800257,
            -0.10958603, -0.11116462, -0.112738, -0.11430582, -0.11586775, -0.1174235,
            -0.1189728, -0.12051554, -0.12205181, -0.12358223, -0.12510876, -0.12663847,
            -0.12821046, -0.12965419, -0.13108179, -0.13249159, -0.13388155, -0.13524906,
            -0.13659075, -0.13790213, -0.1391772, -0.14040769, -0.14158219, -0.1426848,
            -0.14369324, -0.14457621, -0.1452898, -0.14577251, -0.14593855, -0.14566898,
            -0.14566898, -0.15183304, -0.15394848, -0.15394848, -0.15589846, -0.15691651,
            -0.15725543, -0.15709872, -0.15657945, -0.15579407, -0.15481256, -0.15368577,
            -0.15245074, -0.15113459, -0.14975726, -0.14833355, -0.14687456, -0.14538876,
            -0.14388278, -0.14236204, -0.14083137, -0.13929569, -0.1377613, -0.13623996,
            -0.13477792, -0.13327925, -0.13161959, -0.12995483, -0.12828552, -0.12661211,
            -0.12493497, -0.12325443, -0.12157077, -0.11988423, -0.11819503, -0.11650335,
            -0.11480938, -0.11311329, -0.11141524, -0.11141524, -0.113056, -0.11469495,
            -0.11633192, -0.11796676, -0.11959933, -0.12122943, -0.12285689, -0.12448149,
            -0.12610299, -0.12772111, -0.12933552, -0.13094585, -0.13255165, -0.13415236,
            -0.13548434, -0.13693678, -0.13841452, -0.13989858, -0.14138122, -0.14285747,
            -0.14432301, -0.14577338, -0.14720346, -0.14860692, -0.14860692, -0.14998351,
            -0.15131432, -0.15258517, -0.1537771, -0.15486451, -0.15581274, -0.15657464
        ]

        self.assertTrue(np.allclose(y, y_correct),
                        "Objective growth does not match!")

    def test_multi(self):
        slsqp_res = minimize(multi.f_np,
                             x0=np.array([2.0, 1.2]),
                             method="SLSQP",
                             jac=True,
                             bounds=[(1.0, 3.0), (0.5, 2.0)],
                             options={
                                 "maxiter": 50,
                                 "disp": True
                             })
        x_correct = [2.20436169, 1.00000301]
        fun_correct = 1.3971387383125255e-8
        self.assertTrue(np.allclose(slsqp_res.x, x_correct), "Optimizer does not match!")
        self.assertTrue(np.allclose(slsqp_res.fun, fun_correct), "Minimum does not match!")


if __name__ == '__main__':
    unittest.main()
